let gameSeq = []; // Array to store the sequence of colors generated by the game
let userSeq = []; // Array to store the sequence of colors clicked by the user

let started = false; // Variable to track if the game has started

let level = 0; // Variable to track the current game level

let highestLevel = 0; // Variable to track the highest level reached

let h2 = document.querySelector("h2"); // Selecting the h2 element to update the level text

let highestLevelDisplay = document.createElement("h3"); // Create an h3 element to display highest level
highestLevelDisplay.classList.add("highest-level"); // Add a class for styling
document.body.appendChild(highestLevelDisplay); // Append it to the body


let btns = ["red", "yellow", "green", "blue"]; // Array containing the button colors

// Event listener to start the game when a key is pressed
document.addEventListener("keypress", function () {
    if (started == false) { // Check if the game has not started yet
        console.log("game is started"); // Log that the game has started
        started = true; // Set started to true

        levelup(); // Call the function to move to the next level
    }
});

// Function to add a flashing effect to the game button
function gameFlash(btn) {
    btn.classList.add("flash"); // Add the 'flash' class to the button
    setTimeout(function () {
        btn.classList.remove("flash"); // Remove the 'flash' class after 250ms
    }, 250);
}

// Function to add a flashing effect when the user clicks a button
function userFlash(btn) {
    btn.classList.add("useflash"); // Add the 'useflash' class to the button
    setTimeout(function () {
        btn.classList.remove("useflash"); // Remove the 'useflash' class after 250ms
    }, 250);
}

// Function to move to the next level
function levelup() {
    userSeq = []; // Reset the user sequence for the new level
    level++; // Increase the level count
    h2.innerText = `Level ${level}`; // Update the level display in the h2 element

    let randIdx = Math.floor(Math.random() * 4); // Generate a random number between 0 and 3
    let randColor = btns[randIdx]; // Get the color corresponding to the random index
    let randBtn = document.querySelector(`.${randColor}`); // Select the button with the random color

    gameSeq.push(randColor); // Add the randomly chosen color to the game sequence
    console.log(gameSeq); // Log the game sequence to the console as a hint for debugging

    gameFlash(randBtn); // Call the function to flash the randomly chosen button
}

// Function to check the user's input against the game sequence
function checkAns(idx) {
    if (userSeq[idx] === gameSeq[idx]) { // Check if the user clicked the correct color
        if (userSeq.length == gameSeq.length) { // If the user has completed the current sequence
            setTimeout(levelup(), 1000); // Move to the next level after 1 second
        }
    } else { // If the user clicked the wrong button
        updateHighestLevel();
        h2.innerHTML = `Game Over! Your score was <u><b>${level}</b></u> Press any key to start..`; // Display game over message
        document.querySelector("body").style.backgroundcolor = "red"; // Change background color to red
        setTimeout(function () {
            document.querySelector("body").style.backgroundcolor = "white"; // Change background color back to white after 150ms
        }, 150);
        reset(); // Reset the game
    }
}

// Function to handle button clicks
function btnPress() {
    let btn = this; // Get the button that was clicked
    userFlash(btn); // Add flashing effect to the button

    let userColor = btn.getAttribute("id"); // Get the id (color) of the clicked button
    userSeq.push(userColor); // Add the clicked color to the user sequence

    checkAns(userSeq.length - 1); // Check if the clicked sequence is correct
}

// Add event listeners to all buttons for user clicks
let allBtns = document.querySelectorAll('.btn');
for (let btn of allBtns) {
    btn.addEventListener("click", btnPress); // Call btnPress function when a button is clicked
}

// Function to reset the game
function reset() {
    started = false; // Reset started to false
    gameSeq = []; // Clear the game sequence
    userSeq = []; // Clear the user sequence
    level = 0; // Reset level to 0
}

function updateHighestLevel() {
    
    if (level > highestLevel) { // Check if the current level is higher than the previous highest level
        highestLevel = level; // Update highest level
    }
    highestLevelDisplay.innerText = `Highest Level Reached: ${highestLevel}`; // Update highest level display
}